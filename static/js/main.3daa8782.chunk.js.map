{"version":3,"sources":["../../src/FormChat.jsx","../../src/index.js","App.js","index.js"],"names":["FromChat","text","useState","replay","setReplay","loadingBot","setLoadingBot","msgNow","useEffect","length","x","message","botReplay","setTimeout","React","Fragment","className","styles","src","alt","map","db","i","key","style","visibility","height","Avvvatars","size","value","id","ExpertBot","show","setShow","setMessage","inputMessage","useRef","onClick","MdForum","MdClose","onSubmit","e","preventDefault","current","handleChanges","type","ref","placeholder","htmlFor","MdOutlineSend","App","ReactDOM","render","document","getElementById"],"mappings":"4vCAIO,IAAMA,EAAW,SAAC,GAAa,IAAXC,EAAW,EAAXA,KACxB,EAA2BC,mBAAS,IAA7BC,EAAP,KAAcC,EAAd,KACA,EAAmCF,oBAAS,GAArCG,EAAP,KAAkBC,EAAlB,KACOC,EAAoBL,mBAAS,2BAApC,GAyBA,OAxBDM,qBAAU,WACP,GAAGP,EAAKQ,OAAS,EAAE,CAClB,cAAaR,KAAb,aAAkB,KAAVS,EAAU,QAChBN,EAAU,GAAD,OAAKD,EAAL,CACP,CACCQ,QAAQD,EACRE,UAAqB,4BAAXL,sBAA0DG,EAAI,IAEzE,CACEC,QAAQ,GACRC,UAAU,0BAOhBN,GAAc,GACdO,YAAW,WACXP,GAAc,KAEZ,QAEJ,CAACL,IAEEa,kBAACC,WAAD,KACED,wBAAIE,UAAWC,GACXH,wBAAIE,UAAWC,GACfH,yBAAKE,UAAWC,GAChBH,yBAAKE,UAAWC,GAChBH,yBAAKI,IAAI,+DAA+DC,IAAI,gBAE5EL,uBAAGE,UAAWC,GAAd,6BAKCd,EAAOM,OAAQ,GAAKR,EAAKQ,OAAS,GAAKN,EAAOiB,KAAI,SAACC,EAAGC,GACrD,OACAR,kBAACC,WAAD,CAAUQ,IAAKD,GACjBR,wBAAIE,UAAWC,EAAaO,MAAO,CAACC,WAA0B,KAAfJ,EAAGV,QAAgB,SAAS,UAAUe,OAAsB,KAAfL,EAAGV,QAAiB,IAAI,SACpHG,yBAAKE,UAAWC,GAChBH,uBAAGE,UAAWC,GACXI,EAAGV,SAENG,yBAAKE,UAAWC,GAChBH,kBAACa,IAAD,CAAWH,MAAM,QAAQI,KAAM,GAAIC,MAAM,qBAKzCf,wBAAIE,UAAWC,GACfH,yBAAKE,UAAWC,GAChBH,yBAAKE,UAAWC,GAChBH,yBAAKI,IAAI,+DAA+DC,IAAI,gBAE5EL,uBAAGE,UAAWC,GACXZ,EACAS,yBAAKgB,GAAIb,GACPH,yBAAKgB,GAAIb,EAAoBD,UAAWC,IACxCH,yBAAKgB,GAAIb,EAAqBD,UAAWC,IACzCH,yBAAKgB,GAAIb,EAAqBD,UAAWC,IACzCH,yBAAKgB,GAAIb,EAAqBD,UAAWC,KAG3CI,EAAGT,oBCrENmB,EAAY,SAAC,GACxB,MAAuB7B,oBAAS,GAAzB8B,EAAP,KAAYC,EAAZ,KAEA,GADiC/B,mBAAS,IACbA,mBAAS,KAA/BS,EAAP,KAAeuB,EAAf,KACMC,EAAeC,iBAAO,MAM5B,OAAOtB,6BAASE,UAAWC,GAClBH,6BAASE,UAAWC,GAClBH,uBAAGuB,QAAS,kBAAKJ,GAASD,KACxBA,EACAlB,kBAACwB,IAAD,MAEAxB,kBAACyB,IAAD,QAIHP,EAAO,GACRlB,6BAASE,UAAWC,GAClBH,kBAACd,EAAD,CAAUC,KAAMU,IAChBG,0BAAME,UAAWC,EAAoBuB,SAAU,SAACC,GAAD,OAlBpC,SAACA,GACpBA,EAAEC,iBACHR,EAAW,GAAD,OAAKvB,EAAL,CAAawB,EAAaQ,QAAQd,SAC5CM,EAAaQ,QAAQd,MAAQ,GAeiCe,CAAcH,KAChE3B,yBAAKE,UAAWC,GACdH,2BAAO+B,KAAK,OAAOC,IAAKX,EAAcnB,UAAWC,EAAqBa,GAAG,UAAUiB,YAAY,wBAC/FjC,2BAAOkC,QAAQ,UAAUhC,UAAWC,GAAiBH,kBAACmC,IAAD,YCrBxDC,G,MAJH,WACV,OAAO,kBAAC,EAAD,QCATC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.3daa8782.chunk.js","sourcesContent":["import React,{Fragment,useEffect,useState} from 'react';\r\nimport Avvvatars from 'avvvatars-react'\r\nimport styles from './styles.module.css';\r\nimport download from \"./bot.png\";\r\nexport const FromChat = ({ text }) => {\r\n   const [replay,setReplay] = useState([]);\r\n   const [loadingBot,setLoadingBot] = useState(false); \r\n   const [msgNow,setMsgNow] = useState(\"Hello,What's your name?\")\r\n  useEffect(()=>{ \r\n     if(text.length > 0){\r\n      for(let x of text){\r\n        setReplay([...replay,\r\n          {\r\n           message:x,\r\n           botReplay:msgNow === \"Hello,What's your name?\"? `Uh good welcome, ${x}`:\"\"\r\n          },\r\n          {\r\n            message:\"\",\r\n            botReplay:\"How can i help you?\"\r\n          }\r\n      ]);\r\n      \r\n      }\r\n   \r\n  \r\n      setLoadingBot(true);\r\n      setTimeout(()=>{\r\n      setLoadingBot(false);\r\n\r\n      },2000)\r\n     }  \r\n  },[text])\r\n   return (\r\n       <Fragment>\r\n         <ul className={styles.lists}>\r\n             <li className={styles.list}>\r\n             <div className={styles.listContainer}>\r\n             <div className={styles.avatar}>  \r\n             <img src=\"https://gypsydangerous.github.io/number-guessing-bot/bot.png\" alt=\"Bot Avatar\" />\r\n             </div>\r\n             <p className={styles.messageUser}>\r\n              Hello,What's your name?\r\n             </p>\r\n             </div>\r\n             </li>\r\n             {replay.length> 0 && text.length > 0 && replay.map((db,i)=>{\r\n               return( \r\n               <Fragment key={i}>\r\n             <li className={styles.list} style={{visibility:db.message === \"\"? 'hidden':'visible',height:db.message === \"\" ? \"0\":\"3rem\"}}>\r\n             <div className={styles.listContainer}>\r\n             <p className={styles.messageUser}>\r\n               {db.message} \r\n             </p>\r\n             <div className={styles.avatar}>  \r\n             <Avvvatars style='shape' size={40} value=\"tim@apple.com\" />\r\n             </div>\r\n             </div>\r\n             </li>\r\n          \r\n             <li className={styles.list}>\r\n             <div className={styles.listContainer}>\r\n             <div className={styles.avatar}>  \r\n             <img src=\"https://gypsydangerous.github.io/number-guessing-bot/bot.png\" alt=\"Bot Avatar\" />\r\n             </div>\r\n             <p className={styles.messageUser}>\r\n               {loadingBot? \r\n                <div id={styles.fountainG}>\r\n                  <div id={styles.fountainG_1} className={styles.fountainG}></div>\r\n                  <div id={styles.fountainG_2}  className={styles.fountainG}></div>\r\n                  <div id={styles.fountainG_3}  className={styles.fountainG}></div>\r\n                  <div id={styles.fountainG_4}  className={styles.fountainG}></div>\r\n                \r\n                </div>\r\n               :db.botReplay\r\n              }\r\n             </p>\r\n             </div>\r\n             </li>\r\n                        \r\n          </Fragment>\r\n          )\r\n          })\r\n          }\r\n         </ul>\r\n       </Fragment>\r\n   )\r\n}","import React,{useState,useRef} from 'react'\nimport styles from './styles.module.css'\nimport {MdForum,MdOutlineSend,MdClose} from \"react-icons/md\";\nimport {FromChat} from \"./FormChat\";\nexport const ExpertBot = ({ text }) => {\n  const [show,setShow] = useState(true);\n  const [userInput,setUserInput] = useState(\"\");\n  const [message,setMessage] = useState([]);\n  const inputMessage = useRef(null);\n  const handleChanges = (e)=>{\n     e.preventDefault();\n    setMessage([...message,inputMessage.current.value]);\n    inputMessage.current.value = \"\";\n  }\n  return <section className={styles.test}>\n           <section className={styles.chatBotIcon}>\n             <a onClick={()=> setShow(!show)}>\n              {show ? \n               <MdForum/>\n               :\n               <MdClose/>\n              }\n             </a>\n           </section>\n           {show ? \"\":\n           <section className={styles.chatContainer}>\n             <FromChat text={message} />\n             <form className={styles.formMessage} onSubmit={(e)=> handleChanges(e)}>\n                <div className={styles.messageContainer}>\n                  <input type=\"text\" ref={inputMessage} className={styles.messageInput} id=\"message\" placeholder='    '/>\n                  <label htmlFor='message' className={styles.sendIcon}><MdOutlineSend/></label>\n\n                </div>\n             </form>\n           </section>\n           }\n         </section>\n}\n","import React from 'react'\n\nimport { ExpertBot } from 'expert-bot'\nimport 'expert-bot/dist/index.css'\n\nconst App = () => {\n  return <ExpertBot />\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}